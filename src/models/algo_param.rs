/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.9.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct AlgoParam {
    /// Positional ranking for the algo. Used for Client Portal.
    #[serde(rename = "guiRank", skip_serializing_if = "Option::is_none")]
    pub gui_rank: Option<i32>,
    #[serde(rename = "defaultValue", skip_serializing_if = "Option::is_none")]
    pub default_value: Option<Box<models::AlgoParamDefaultValue>>,
    #[serde(rename = "minValue", skip_serializing_if = "Option::is_none")]
    pub min_value: Option<i32>,
    #[serde(rename = "maxValue", skip_serializing_if = "Option::is_none")]
    pub max_value: Option<i32>,
    /// Parameter name.
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Parameter identifier for the algo.
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// Allowed values for the parameter.
    #[serde(rename = "legalStrings", skip_serializing_if = "Option::is_none")]
    pub legal_strings: Option<Vec<String>>,
    /// States whether the parameter is required for the given algo order to place.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Returns the variable type of the parameter.
    #[serde(rename = "valueClassName", skip_serializing_if = "Option::is_none")]
    pub value_class_name: Option<ValueClassName>,
}

impl AlgoParam {
    pub fn new() -> AlgoParam {
        AlgoParam {
            gui_rank: None,
            default_value: None,
            min_value: None,
            max_value: None,
            name: None,
            id: None,
            description: None,
            legal_strings: None,
            required: None,
            value_class_name: None,
        }
    }
}
/// Returns the variable type of the parameter.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ValueClassName {
    #[serde(rename = "String")]
    String,
    #[serde(rename = "Boolean")]
    Boolean,
    #[serde(rename = "Time")]
    Time,
    #[serde(rename = "Double")]
    Double,
    #[serde(rename = "Integer")]
    Integer,
}

impl Default for ValueClassName {
    fn default() -> ValueClassName {
        Self::String
    }
}

