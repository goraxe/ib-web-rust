/*
 * IB REST API
 *
 * The IB REST API reference documentation
 *
 * The version of the OpenAPI document: 2.9.0
 * Contact: api@interactivebrokers.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
#[serde(untagged)]
pub enum IserverAccountOrderStatusOrderIdGet200Response {
    OrderStatus(Box<models::OrderStatus>),
}

impl Default for IserverAccountOrderStatusOrderIdGet200Response {
    fn default() -> Self {
        Self::OrderStatus(Default::default())
    }
}
/// Side of the order ticket.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Side {
    #[serde(rename = "BUY")]
    Buy,
    #[serde(rename = "SELL")]
    Sell,
}

impl Default for Side {
    fn default() -> Side {
        Self::Buy
    }
}
/// Status of the order ticket.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "Inactive")]
    Inactive,
    #[serde(rename = "PendingSubmit")]
    PendingSubmit,
    #[serde(rename = "PreSubmitted")]
    PreSubmitted,
    #[serde(rename = "Submitted")]
    Submitted,
    #[serde(rename = "Filled")]
    Filled,
    #[serde(rename = "PendingCancel")]
    PendingCancel,
    #[serde(rename = "Cancelled")]
    Cancelled,
    #[serde(rename = "WarnState")]
    WarnState,
}

impl Default for Status {
    fn default() -> Status {
        Self::Inactive
    }
}
/// Time in force of the order ticket.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Tif {
    #[serde(rename = "DAY")]
    Day,
    #[serde(rename = "IOC")]
    Ioc,
    #[serde(rename = "GTC")]
    Gtc,
    #[serde(rename = "OPG")]
    Opg,
    #[serde(rename = "PAX")]
    Pax,
}

impl Default for Tif {
    fn default() -> Tif {
        Self::Day
    }
}
/// IB asset class identifier.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SecType {
    #[serde(rename = "STK")]
    Stk,
    #[serde(rename = "OPT")]
    Opt,
    #[serde(rename = "FUT")]
    Fut,
    #[serde(rename = "FOP")]
    Fop,
    #[serde(rename = "CASH")]
    Cash,
    #[serde(rename = "CRYPTO")]
    Crypto,
    #[serde(rename = "BOND")]
    Bond,
    #[serde(rename = "WAR")]
    War,
    #[serde(rename = "FUND")]
    Fund,
}

impl Default for SecType {
    fn default() -> SecType {
        Self::Stk
    }
}
/// Indicates if the order ticket is hedged, and if so, in what way. 0 = No hedge, A = Attached child hedge order, B = Beta/portfolio hedge
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ChildOrderType {
    #[serde(rename = "0")]
    Variant0,
    #[serde(rename = "A")]
    A,
    #[serde(rename = "B")]
    B,
}

impl Default for ChildOrderType {
    fn default() -> ChildOrderType {
        Self::Variant0
    }
}

